{
    "address": "0x2033a842a200c8Ff3bae5B22585aAe7E1abAFCc0",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name_",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol_",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_layerZeroEndpoint",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "marketPlaceAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "tokenURI",
            "type": "string"
          }
        ],
        "name": "createToken",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "endpoint",
        "outputs": [
          {
            "internalType": "contract ILayerZeroEndpoint",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "getLocked",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "isTokenIdLocked",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_srcChainId",
            "type": "uint16"
          },
          {
            "internalType": "bytes",
            "name": "_srcAddress",
            "type": "bytes"
          },
          {
            "internalType": "uint64",
            "name": "",
            "type": "uint64"
          },
          {
            "internalType": "bytes",
            "name": "_payload",
            "type": "bytes"
          }
        ],
        "name": "lzReceive",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "",
            "type": "uint16"
          }
        ],
        "name": "remotes",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_chainId",
            "type": "uint16"
          },
          {
            "internalType": "bytes",
            "name": "_dstOmniChainTokenAddr",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "sendTokens",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "_locked",
            "type": "bool"
          }
        ],
        "name": "setLocked",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_chainId",
            "type": "uint16"
          },
          {
            "internalType": "bytes",
            "name": "_remoteAddress",
            "type": "bytes"
          }
        ],
        "name": "setRemote",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "tokenExists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xccccddb58fd2babae064037f5271878c86af4be3b41e31db9d41fdd410f84656",
    "receipt": {
      "to": null,
      "from": "0x6b1e0D61eb90e529b198D69952C9e2F775101C74",
      "contractAddress": "0x2033a842a200c8Ff3bae5B22585aAe7E1abAFCc0",
      "transactionIndex": 6,
      "gasUsed": "3581520",
      "logsBloom": "0x
      "blockHash": "0x6a20649842c7e4196c35ec03b6f6939db72b04bcdf97f087f3abf1bef65015e2",
      "transactionHash": "0xccccddb58fd2babae064037f5271878c86af4be3b41e31db9d41fdd410f84656",
      "logs": [
        {
          "transactionIndex": 6,
          "blockNumber": 10395305,
          "transactionHash": "0xccccddb58fd2babae064037f5271878c86af4be3b41e31db9d41fdd410f84656",
          "address": "0x2033a842a200c8Ff3bae5B22585aAe7E1abAFCc0",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000006b1e0d61eb90e529b198d69952c9e2f775101c74"
          ],
          "data": "0x",
          "logIndex": 6,
          "blockHash": "0x6a20649842c7e4196c35ec03b6f6939db72b04bcdf97f087f3abf1bef65015e2"
        }
      ],
      "blockNumber": 10395305,
      "cumulativeGasUsed": "8767403",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "OmniChainToken",
      "MCT",
      "0x79a63d6d8BBD5c6dfc774dA79bCcD948EAcb53FA",
      "0x7e592E887A602dcA43172987fB5a31aE76A8964F"
    ],
    "numDeployments": 31,
    "solcInputHash": "283e6540eb9de286a08b6e99a8a5f238",
    "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketPlaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTokenIdLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"remotes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_dstOmniChainTokenAddr\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\ncontract NFT is ERC721URIStorage, ILayerZeroReceiver, Ownable {\\n\\n    ILayerZeroEndpoint public endpoint;\\n    mapping(uint16 => bytes) public remotes;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    address contractAddress;\\n    mapping(uint256 => bool) public tokenExists;\\n    mapping(uint256 => bool) public isTokenIdLocked;\\n\\n    /*constructor(address marketPlaceAddress)\\n        ERC721(\\\"Concepts and Solutions Token\\\", \\\"CAST\\\")\\n    {\\n        contractAddress = marketPlaceAddress;\\n    }*/\\n\\n\\n    function setLocked(uint256 _tokenId, bool _locked) public {\\n        isTokenIdLocked[_tokenId] = _locked;\\n    }\\n\\n    function getLocked(uint256 _tokenId) public returns (bool){\\n        return isTokenIdLocked[_tokenId];\\n    }\\n\\n    // constructor mints tokens to the deployer\\n    constructor(string memory name_, string memory symbol_, address _layerZeroEndpoint, address marketPlaceAddress) ERC721(\\\"Concep\\\", \\\"CAST\\\"){\\n        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\\n        contractAddress = marketPlaceAddress;\\n        //createToken(\\\"https://gateway.pinata.cloud/ipfs/QmZXsHdE13ruPqz3myrrSdnUZuMYtWmWr4DmRkuCT9jLAQ/\\\");\\n        //\\n    }\\n\\n    function createToken(string memory tokenURI) public returns (uint256) {\\n        _tokenIds.increment();\\n        uint256 newTokenId = _tokenIds.current();\\n        _mint(msg.sender,newTokenId);\\n        _setTokenURI(newTokenId, tokenURI);\\n        setApprovalForAll(contractAddress, true);\\n        return newTokenId;\\n    }\\n\\n        // send tokens to another chain.\\n    // this function sends the tokens from your address to the same address on the destination.\\n    function sendTokens(\\n        uint16 _chainId,                            // send tokens to this chainId\\n        bytes calldata _dstOmniChainTokenAddr,     // destination address of OmniChainToken\\n        uint256 _tokenId                                  // how many tokens to send\\n    )\\n        public\\n        payable\\n    {\\n        // burn the tokens locally.\\n        // tokens will be minted on the destination.\\n        //require(\\n         //   allowance(msg.sender, address(this)) >= _qty,\\n         //   \\\"You need to approve the contract to send your tokens!\\\"\\n        //);\\n\\n        // and burn the local tokens *poof*\\n        _burn(_tokenId);\\n        //transferFrom(msg.sender, address(this), _tokenId);\\n        //setLocked(_tokenId,true);\\n\\n        // abi.encode() the payload with the values to send\\n        //bytes memory payload = abi.encode(address(0x6b1e0D61eb90e529b198D69952C9e2F775101C74), uint256(2));\\n        bytes memory payload = abi.encode(msg.sender, _tokenId);\\n\\n        // send LayerZero message\\n        endpoint.send{value:msg.value}(\\n            _chainId,                       // destination chainId\\n            _dstOmniChainTokenAddr,        // destination address of OmniChainToken\\n            payload,                        // abi.encode()'ed bytes\\n            payable(msg.sender),            // refund address (LayerZero will refund any superflous gas back to caller of send()\\n            address(0x0),                   // 'zroPaymentAddress' unused for this mock/example\\n            bytes(\\\"\\\")                       // 'txParameters' unused for this mock/example\\n        );\\n    }\\n\\n    // _chainId - the chainId for the remote contract\\n    // _remoteAddress - the contract address on the remote chainId\\n    // the owner must set remote contract addresses.\\n    // in lzReceive(), a require() ensures only messages\\n    // from known contracts can be received.\\n    function setRemote(uint16 _chainId, bytes calldata _remoteAddress) external onlyOwner {\\n        require(remotes[_chainId].length == 0, \\\"The remote address has already been set for the chainId!\\\");\\n        remotes[_chainId] = _remoteAddress;\\n    }\\n\\n    // receive the bytes payload from the source chain via LayerZero\\n    // _fromAddress is the source OmniChainToken address\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64, bytes memory _payload) override external{\\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\\n        // owner must have setRemote() to allow its remote contracts to send to this contract\\n        //require(\\n        //    _srcAddress.length == remotes[_srcChainId].length && keccak256(_srcAddress) == keccak256(remotes[_srcChainId]),\\n        //    \\\"Invalid remote sender address. owner should call setRemote() to enable remote contract\\\"\\n        //);\\n\\n        // decode\\n        (address toAddr, uint256 _tokenId) = abi.decode(_payload, (address, uint256));\\n\\n        // mint the tokens back into existence, to the toAddr from the message payload\\n        //if(!tokenExists[_tokenId]){\\n            _mint(toAddr, _tokenId);\\n        //    tokenExists[_tokenId] = true;\\n        //}else{\\n        //    transferFrom(address(this), toAddr, _tokenId);\\n        //}\\n        //setLocked(_tokenId,false);    \\n    }\\n}\",\"keccak256\":\"0xd308249fb7d2649bf56e80aac90a1407cfabd8fd42b1ed15d8e5385582c1e1c8\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xbc2e0022d4d53d136830aa90037be2ed7a0966f5fd1b409bf5986185984c495f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xd1617e455d90d41556bba636bc440627d301ec481de16ff04fbd520333c3c6f3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b50604051620043923803806200439283398181016040528101906200003791906200038a565b6040518060400160405280600681526020017f436f6e63657000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f43415354000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000251565b508060019080519060200190620000d492919062000251565b505050620000f7620000eb6200018360201b60201c565b6200018b60201b60201c565b81600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620005e6565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200025f90620004f1565b90600052602060002090601f016020900481019282620002835760008555620002cf565b82601f106200029e57805160ff1916838001178555620002cf565b82800160010185558215620002cf579182015b82811115620002ce578251825591602001919060010190620002b1565b5b509050620002de9190620002e2565b5090565b5b80821115620002fd576000816000905550600101620002e3565b5090565b600062000318620003128462000451565b62000428565b9050828152602081018484840111156200033157600080fd5b6200033e848285620004bb565b509392505050565b6000815190506200035781620005cc565b92915050565b600082601f8301126200036f57600080fd5b81516200038184826020860162000301565b91505092915050565b60008060008060808587031215620003a157600080fd5b600085015167ffffffffffffffff811115620003bc57600080fd5b620003ca878288016200035d565b945050602085015167ffffffffffffffff811115620003e857600080fd5b620003f6878288016200035d565b9350506040620004098782880162000346565b92505060606200041c8782880162000346565b91505092959194509250565b60006200043462000447565b905062000442828262000527565b919050565b6000604051905090565b600067ffffffffffffffff8211156200046f576200046e6200058c565b5b6200047a82620005bb565b9050602081019050919050565b600062000494826200049b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620004db578082015181840152602081019050620004be565b83811115620004eb576000848401525b50505050565b600060028204905060018216806200050a57607f821691505b602082108114156200052157620005206200055d565b5b50919050565b6200053282620005bb565b810181811067ffffffffffffffff821117156200055457620005536200058c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620005d78162000487565b8114620005e357600080fd5b50565b613d9c80620005f66000396000f3fe60806040526004361061017f5760003560e01c806345576f94116100d157806395d89b411161008a578063b88d4fde11610064578063b88d4fde146105a7578063c87b56dd146105d0578063e985e9c51461060d578063f2fde38b1461064a5761017f565b806395d89b41146105165780639d1f611314610541578063a22cb4651461057e5761017f565b806345576f94146103f25780635e280f111461042f5780636352211e1461045a57806370a0823114610497578063715018a6146104d45780638da5cb5b146104eb5761017f565b8063095ea7b31161013e57806323b872dd1161011857806323b872dd1461034757806336da46c9146103705780633b035df61461038c57806342842e0e146103c95761017f565b8063095ea7b3146102cc5780630a3cc989146102f557806320cdd0a11461031e5761017f565b80621d356714610184578062923f9e146101ad57806301ffc9a7146101ea57806306ddfe551461022757806306fdde0314610264578063081812fc1461028f575b600080fd5b34801561019057600080fd5b506101ab60048036038101906101a69190612a67565b610673565b005b3480156101b957600080fd5b506101d460048036038101906101cf9190612afa565b6106fa565b6040516101e19190612fd6565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c91906128e7565b61071a565b60405161021e9190612fd6565b60405180910390f35b34801561023357600080fd5b5061024e60048036038101906102499190612afa565b6107fc565b60405161025b9190612fd6565b60405180910390f35b34801561027057600080fd5b5061027961081c565b604051610286919061302e565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190612afa565b6108ae565b6040516102c39190612f46565b60405180910390f35b3480156102d857600080fd5b506102f360048036038101906102ee91906128ab565b610933565b005b34801561030157600080fd5b5061031c60048036038101906103179190612b23565b610a4b565b005b34801561032a57600080fd5b50610345600480360381019061034091906129a3565b610a7a565b005b34801561035357600080fd5b5061036e600480360381019061036991906127a5565b610b90565b005b61038a600480360381019061038591906129fb565b610bf0565b005b34801561039857600080fd5b506103b360048036038101906103ae9190612afa565b610cd0565b6040516103c09190612fd6565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb91906127a5565b610cfa565b005b3480156103fe57600080fd5b5061041960048036038101906104149190612939565b610d1a565b6040516104269190613328565b60405180910390f35b34801561043b57600080fd5b50610444610d7e565b6040516104519190613013565b60405180910390f35b34801561046657600080fd5b50610481600480360381019061047c9190612afa565b610da4565b60405161048e9190612f46565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b99190612704565b610e56565b6040516104cb9190613328565b60405180910390f35b3480156104e057600080fd5b506104e9610f0e565b005b3480156104f757600080fd5b50610500610f96565b60405161050d9190612f46565b60405180910390f35b34801561052257600080fd5b5061052b610fc0565b604051610538919061302e565b60405180910390f35b34801561054d57600080fd5b506105686004803603810190610563919061297a565b611052565b6040516105759190612ff1565b60405180910390f35b34801561058a57600080fd5b506105a560048036038101906105a0919061286f565b6110f2565b005b3480156105b357600080fd5b506105ce60048036038101906105c991906127f4565b611108565b005b3480156105dc57600080fd5b506105f760048036038101906105f29190612afa565b61116a565b604051610604919061302e565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f9190612769565b6112bc565b6040516106419190612fd6565b60405180910390f35b34801561065657600080fd5b50610671600480360381019061066c9190612704565b611350565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd57600080fd5b600080828060200190518101906106e4919061272d565b915091506106f28282611448565b505050505050565b600c6020528060005260406000206000915054906101000a900460ff1681565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107e557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107f557506107f482611622565b5b9050919050565b600d6020528060005260406000206000915054906101000a900460ff1681565b60606000805461082b906135d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610857906135d6565b80156108a45780601f10610879576101008083540402835291602001916108a4565b820191906000526020600020905b81548152906001019060200180831161088757829003601f168201915b5050505050905090565b60006108b98261168c565b6108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef906131f0565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061093e82610da4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690613250565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109ce6116f8565b73ffffffffffffffffffffffffffffffffffffffff1614806109fd57506109fc816109f76116f8565b6112bc565b5b610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3390613130565b60405180910390fd5b610a468383611700565b505050565b80600d600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610a826116f8565b73ffffffffffffffffffffffffffffffffffffffff16610aa0610f96565b73ffffffffffffffffffffffffffffffffffffffff1614610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90613210565b60405180910390fd5b6000600960008561ffff1661ffff1681526020019081526020016000208054610b1e906135d6565b905014610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5790613290565b60405180910390fd5b8181600960008661ffff1661ffff1681526020019081526020016000209190610b8a9291906123c4565b50505050565b610ba1610b9b6116f8565b826117b9565b610be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd790613270565b60405180910390fd5b610beb838383611897565b505050565b610bf981611afe565b60003382604051602001610c0e929190612fad565b6040516020818303038152906040529050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003487878786336000604051806020016040528060008152506040518963ffffffff1660e01b8152600401610c9797969594939291906132b0565b6000604051808303818588803b158015610cb057600080fd5b505af1158015610cc4573d6000803e3d6000fd5b50505050505050505050565b6000600d600083815260200190815260200160002060009054906101000a900460ff169050919050565b610d1583838360405180602001604052806000815250611108565b505050565b6000610d26600a611b51565b6000610d32600a611b67565b9050610d3e3382611448565b610d488184611b75565b610d75600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016110f2565b80915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4490613170565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90613150565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f166116f8565b73ffffffffffffffffffffffffffffffffffffffff16610f34610f96565b73ffffffffffffffffffffffffffffffffffffffff1614610f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8190613210565b60405180910390fd5b610f946000611be9565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610fcf906135d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffb906135d6565b80156110485780601f1061101d57610100808354040283529160200191611048565b820191906000526020600020905b81548152906001019060200180831161102b57829003601f168201915b5050505050905090565b60096020528060005260406000206000915090508054611071906135d6565b80601f016020809104026020016040519081016040528092919081815260200182805461109d906135d6565b80156110ea5780601f106110bf576101008083540402835291602001916110ea565b820191906000526020600020905b8154815290600101906020018083116110cd57829003601f168201915b505050505081565b6111046110fd6116f8565b8383611caf565b5050565b6111196111136116f8565b836117b9565b611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90613270565b60405180910390fd5b61116484848484611e1c565b50505050565b60606111758261168c565b6111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab906131d0565b60405180910390fd5b60006006600084815260200190815260200160002080546111d4906135d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611200906135d6565b801561124d5780601f106112225761010080835404028352916020019161124d565b820191906000526020600020905b81548152906001019060200180831161123057829003601f168201915b50505050509050600061125e611e78565b90506000815114156112745781925050506112b7565b6000825111156112a9578082604051602001611291929190612f22565b604051602081830303815290604052925050506112b7565b6112b284611e8f565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6113586116f8565b73ffffffffffffffffffffffffffffffffffffffff16611376610f96565b73ffffffffffffffffffffffffffffffffffffffff16146113cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c390613210565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561143c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143390613070565b60405180910390fd5b61144581611be9565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af906131b0565b60405180910390fd5b6114c18161168c565b15611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f8906130b0565b60405180910390fd5b61150d60008383611f36565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461155d919061340d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461161e60008383611f3b565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661177383610da4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006117c48261168c565b611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa90613110565b60405180910390fd5b600061180e83610da4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187d57508373ffffffffffffffffffffffffffffffffffffffff16611865846108ae565b73ffffffffffffffffffffffffffffffffffffffff16145b8061188e575061188d81856112bc565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118b782610da4565b73ffffffffffffffffffffffffffffffffffffffff161461190d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190490613090565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561197d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611974906130d0565b60405180910390fd5b611988838383611f36565b611993600082611700565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119e39190613494565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a3a919061340d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611af9838383611f3b565b505050565b611b0781611f40565b6000600660008381526020019081526020016000208054611b27906135d6565b905014611b4e57600660008281526020019081526020016000206000611b4d919061244a565b5b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b611b7e8261168c565b611bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb490613190565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611be492919061248a565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d15906130f0565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e0f9190612fd6565b60405180910390a3505050565b611e27848484611897565b611e338484848461205d565b611e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6990613050565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e9a8261168c565b611ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed090613230565b60405180910390fd5b6000611ee3611e78565b90506000815111611f035760405180602001604052806000815250611f2e565b80611f0d846121f4565b604051602001611f1e929190612f22565b6040516020818303038152906040525b915050919050565b505050565b505050565b6000611f4b82610da4565b9050611f5981600084611f36565b611f64600083611700565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb49190613494565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461205981600084611f3b565b5050565b600061207e8473ffffffffffffffffffffffffffffffffffffffff166123a1565b156121e7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120a76116f8565b8786866040518563ffffffff1660e01b81526004016120c99493929190612f61565b602060405180830381600087803b1580156120e357600080fd5b505af192505050801561211457506040513d601f19601f820116820180604052508101906121119190612910565b60015b612197573d8060008114612144576040519150601f19603f3d011682016040523d82523d6000602084013e612149565b606091505b5060008151141561218f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218690613050565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506121ec565b600190505b949350505050565b6060600082141561223c576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061239c565b600082905060005b6000821461226e57808061225790613639565b915050600a826122679190613463565b9150612244565b60008167ffffffffffffffff8111156122b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122e25781602001600182028036833780820191505090505b5090505b60008514612395576001826122fb9190613494565b9150600a8561230a9190613682565b6030612316919061340d565b60f81b818381518110612352577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561238e9190613463565b94506122e6565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546123d0906135d6565b90600052602060002090601f0160209004810192826123f25760008555612439565b82601f1061240b57803560ff1916838001178555612439565b82800160010185558215612439579182015b8281111561243857823582559160200191906001019061241d565b5b5090506124469190612510565b5090565b508054612456906135d6565b6000825580601f106124685750612487565b601f0160209004906000526020600020908101906124869190612510565b5b50565b828054612496906135d6565b90600052602060002090601f0160209004810192826124b857600085556124ff565b82601f106124d157805160ff19168380011785556124ff565b828001600101855582156124ff579182015b828111156124fe5782518255916020019190600101906124e3565b5b50905061250c9190612510565b5090565b5b80821115612529576000816000905550600101612511565b5090565b600061254061253b84613368565b613343565b90508281526020810184848401111561255857600080fd5b612563848285613594565b509392505050565b600061257e61257984613399565b613343565b90508281526020810184848401111561259657600080fd5b6125a1848285613594565b509392505050565b6000813590506125b881613cc5565b92915050565b6000815190506125cd81613cdc565b92915050565b6000813590506125e281613cf3565b92915050565b6000813590506125f781613d0a565b92915050565b60008151905061260c81613d0a565b92915050565b60008083601f84011261262457600080fd5b8235905067ffffffffffffffff81111561263d57600080fd5b60208301915083600182028301111561265557600080fd5b9250929050565b600082601f83011261266d57600080fd5b813561267d84826020860161252d565b91505092915050565b600082601f83011261269757600080fd5b81356126a784826020860161256b565b91505092915050565b6000813590506126bf81613d21565b92915050565b6000813590506126d481613d38565b92915050565b6000815190506126e981613d38565b92915050565b6000813590506126fe81613d4f565b92915050565b60006020828403121561271657600080fd5b6000612724848285016125a9565b91505092915050565b6000806040838503121561274057600080fd5b600061274e858286016125be565b925050602061275f858286016126da565b9150509250929050565b6000806040838503121561277c57600080fd5b600061278a858286016125a9565b925050602061279b858286016125a9565b9150509250929050565b6000806000606084860312156127ba57600080fd5b60006127c8868287016125a9565b93505060206127d9868287016125a9565b92505060406127ea868287016126c5565b9150509250925092565b6000806000806080858703121561280a57600080fd5b6000612818878288016125a9565b9450506020612829878288016125a9565b935050604061283a878288016126c5565b925050606085013567ffffffffffffffff81111561285757600080fd5b6128638782880161265c565b91505092959194509250565b6000806040838503121561288257600080fd5b6000612890858286016125a9565b92505060206128a1858286016125d3565b9150509250929050565b600080604083850312156128be57600080fd5b60006128cc858286016125a9565b92505060206128dd858286016126c5565b9150509250929050565b6000602082840312156128f957600080fd5b6000612907848285016125e8565b91505092915050565b60006020828403121561292257600080fd5b6000612930848285016125fd565b91505092915050565b60006020828403121561294b57600080fd5b600082013567ffffffffffffffff81111561296557600080fd5b61297184828501612686565b91505092915050565b60006020828403121561298c57600080fd5b600061299a848285016126b0565b91505092915050565b6000806000604084860312156129b857600080fd5b60006129c6868287016126b0565b935050602084013567ffffffffffffffff8111156129e357600080fd5b6129ef86828701612612565b92509250509250925092565b60008060008060608587031215612a1157600080fd5b6000612a1f878288016126b0565b945050602085013567ffffffffffffffff811115612a3c57600080fd5b612a4887828801612612565b93509350506040612a5b878288016126c5565b91505092959194509250565b60008060008060808587031215612a7d57600080fd5b6000612a8b878288016126b0565b945050602085013567ffffffffffffffff811115612aa857600080fd5b612ab48782880161265c565b9350506040612ac5878288016126ef565b925050606085013567ffffffffffffffff811115612ae257600080fd5b612aee8782880161265c565b91505092959194509250565b600060208284031215612b0c57600080fd5b6000612b1a848285016126c5565b91505092915050565b60008060408385031215612b3657600080fd5b6000612b44858286016126c5565b9250506020612b55858286016125d3565b9150509250929050565b612b68816134da565b82525050565b612b77816134c8565b82525050565b612b86816134ec565b82525050565b6000612b9883856133e0565b9350612ba5838584613594565b612bae8361376f565b840190509392505050565b6000612bc4826133ca565b612bce81856133e0565b9350612bde8185602086016135a3565b612be78161376f565b840191505092915050565b612bfb81613570565b82525050565b6000612c0c826133d5565b612c1681856133f1565b9350612c268185602086016135a3565b612c2f8161376f565b840191505092915050565b6000612c45826133d5565b612c4f8185613402565b9350612c5f8185602086016135a3565b80840191505092915050565b6000612c786032836133f1565b9150612c8382613780565b604082019050919050565b6000612c9b6026836133f1565b9150612ca6826137cf565b604082019050919050565b6000612cbe6025836133f1565b9150612cc98261381e565b604082019050919050565b6000612ce1601c836133f1565b9150612cec8261386d565b602082019050919050565b6000612d046024836133f1565b9150612d0f82613896565b604082019050919050565b6000612d276019836133f1565b9150612d32826138e5565b602082019050919050565b6000612d4a602c836133f1565b9150612d558261390e565b604082019050919050565b6000612d6d6038836133f1565b9150612d788261395d565b604082019050919050565b6000612d90602a836133f1565b9150612d9b826139ac565b604082019050919050565b6000612db36029836133f1565b9150612dbe826139fb565b604082019050919050565b6000612dd6602e836133f1565b9150612de182613a4a565b604082019050919050565b6000612df96020836133f1565b9150612e0482613a99565b602082019050919050565b6000612e1c6031836133f1565b9150612e2782613ac2565b604082019050919050565b6000612e3f602c836133f1565b9150612e4a82613b11565b604082019050919050565b6000612e626020836133f1565b9150612e6d82613b60565b602082019050919050565b6000612e85602f836133f1565b9150612e9082613b89565b604082019050919050565b6000612ea86021836133f1565b9150612eb382613bd8565b604082019050919050565b6000612ecb6031836133f1565b9150612ed682613c27565b604082019050919050565b6000612eee6038836133f1565b9150612ef982613c76565b604082019050919050565b612f0d81613524565b82525050565b612f1c81613552565b82525050565b6000612f2e8285612c3a565b9150612f3a8284612c3a565b91508190509392505050565b6000602082019050612f5b6000830184612b6e565b92915050565b6000608082019050612f766000830187612b6e565b612f836020830186612b6e565b612f906040830185612f13565b8181036060830152612fa28184612bb9565b905095945050505050565b6000604082019050612fc26000830185612b6e565b612fcf6020830184612f13565b9392505050565b6000602082019050612feb6000830184612b7d565b92915050565b6000602082019050818103600083015261300b8184612bb9565b905092915050565b60006020820190506130286000830184612bf2565b92915050565b600060208201905081810360008301526130488184612c01565b905092915050565b6000602082019050818103600083015261306981612c6b565b9050919050565b6000602082019050818103600083015261308981612c8e565b9050919050565b600060208201905081810360008301526130a981612cb1565b9050919050565b600060208201905081810360008301526130c981612cd4565b9050919050565b600060208201905081810360008301526130e981612cf7565b9050919050565b6000602082019050818103600083015261310981612d1a565b9050919050565b6000602082019050818103600083015261312981612d3d565b9050919050565b6000602082019050818103600083015261314981612d60565b9050919050565b6000602082019050818103600083015261316981612d83565b9050919050565b6000602082019050818103600083015261318981612da6565b9050919050565b600060208201905081810360008301526131a981612dc9565b9050919050565b600060208201905081810360008301526131c981612dec565b9050919050565b600060208201905081810360008301526131e981612e0f565b9050919050565b6000602082019050818103600083015261320981612e32565b9050919050565b6000602082019050818103600083015261322981612e55565b9050919050565b6000602082019050818103600083015261324981612e78565b9050919050565b6000602082019050818103600083015261326981612e9b565b9050919050565b6000602082019050818103600083015261328981612ebe565b9050919050565b600060208201905081810360008301526132a981612ee1565b9050919050565b600060c0820190506132c5600083018a612f04565b81810360208301526132d881888a612b8c565b905081810360408301526132ec8187612bb9565b90506132fb6060830186612b5f565b6133086080830185612b6e565b81810360a083015261331a8184612bb9565b905098975050505050505050565b600060208201905061333d6000830184612f13565b92915050565b600061334d61335e565b90506133598282613608565b919050565b6000604051905090565b600067ffffffffffffffff82111561338357613382613740565b5b61338c8261376f565b9050602081019050919050565b600067ffffffffffffffff8211156133b4576133b3613740565b5b6133bd8261376f565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061341882613552565b915061342383613552565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613458576134576136b3565b5b828201905092915050565b600061346e82613552565b915061347983613552565b925082613489576134886136e2565b5b828204905092915050565b600061349f82613552565b91506134aa83613552565b9250828210156134bd576134bc6136b3565b5b828203905092915050565b60006134d382613532565b9050919050565b60006134e582613532565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061357b82613582565b9050919050565b600061358d82613532565b9050919050565b82818337600083830152505050565b60005b838110156135c15780820151818401526020810190506135a6565b838111156135d0576000848401525b50505050565b600060028204905060018216806135ee57607f821691505b6020821081141561360257613601613711565b5b50919050565b6136118261376f565b810181811067ffffffffffffffff821117156136305761362f613740565b5b80604052505050565b600061364482613552565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613677576136766136b3565b5b600182019050919050565b600061368d82613552565b915061369883613552565b9250826136a8576136a76136e2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f5468652072656d6f746520616464726573732068617320616c7265616479206260008201527f65656e2073657420666f722074686520636861696e4964210000000000000000602082015250565b613cce816134c8565b8114613cd957600080fd5b50565b613ce5816134da565b8114613cf057600080fd5b50565b613cfc816134ec565b8114613d0757600080fd5b50565b613d13816134f8565b8114613d1e57600080fd5b50565b613d2a81613524565b8114613d3557600080fd5b50565b613d4181613552565b8114613d4c57600080fd5b50565b613d588161355c565b8114613d6357600080fd5b5056fea2646970667358221220c814079c39dac143a09eea0b799e0583b7c3471ccc4408983dfa706e224e7a8564736f6c63430008040033",
    "deployedBytecode": "0x60806040526004361061017f5760003560e01c806345576f94116100d157806395d89b411161008a578063b88d4fde11610064578063b88d4fde146105a7578063c87b56dd146105d0578063e985e9c51461060d578063f2fde38b1461064a5761017f565b806395d89b41146105165780639d1f611314610541578063a22cb4651461057e5761017f565b806345576f94146103f25780635e280f111461042f5780636352211e1461045a57806370a0823114610497578063715018a6146104d45780638da5cb5b146104eb5761017f565b8063095ea7b31161013e57806323b872dd1161011857806323b872dd1461034757806336da46c9146103705780633b035df61461038c57806342842e0e146103c95761017f565b8063095ea7b3146102cc5780630a3cc989146102f557806320cdd0a11461031e5761017f565b80621d356714610184578062923f9e146101ad57806301ffc9a7146101ea57806306ddfe551461022757806306fdde0314610264578063081812fc1461028f575b600080fd5b34801561019057600080fd5b506101ab60048036038101906101a69190612a67565b610673565b005b3480156101b957600080fd5b506101d460048036038101906101cf9190612afa565b6106fa565b6040516101e19190612fd6565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c91906128e7565b61071a565b60405161021e9190612fd6565b60405180910390f35b34801561023357600080fd5b5061024e60048036038101906102499190612afa565b6107fc565b60405161025b9190612fd6565b60405180910390f35b34801561027057600080fd5b5061027961081c565b604051610286919061302e565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190612afa565b6108ae565b6040516102c39190612f46565b60405180910390f35b3480156102d857600080fd5b506102f360048036038101906102ee91906128ab565b610933565b005b34801561030157600080fd5b5061031c60048036038101906103179190612b23565b610a4b565b005b34801561032a57600080fd5b50610345600480360381019061034091906129a3565b610a7a565b005b34801561035357600080fd5b5061036e600480360381019061036991906127a5565b610b90565b005b61038a600480360381019061038591906129fb565b610bf0565b005b34801561039857600080fd5b506103b360048036038101906103ae9190612afa565b610cd0565b6040516103c09190612fd6565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb91906127a5565b610cfa565b005b3480156103fe57600080fd5b5061041960048036038101906104149190612939565b610d1a565b6040516104269190613328565b60405180910390f35b34801561043b57600080fd5b50610444610d7e565b6040516104519190613013565b60405180910390f35b34801561046657600080fd5b50610481600480360381019061047c9190612afa565b610da4565b60405161048e9190612f46565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b99190612704565b610e56565b6040516104cb9190613328565b60405180910390f35b3480156104e057600080fd5b506104e9610f0e565b005b3480156104f757600080fd5b50610500610f96565b60405161050d9190612f46565b60405180910390f35b34801561052257600080fd5b5061052b610fc0565b604051610538919061302e565b60405180910390f35b34801561054d57600080fd5b506105686004803603810190610563919061297a565b611052565b6040516105759190612ff1565b60405180910390f35b34801561058a57600080fd5b506105a560048036038101906105a0919061286f565b6110f2565b005b3480156105b357600080fd5b506105ce60048036038101906105c991906127f4565b611108565b005b3480156105dc57600080fd5b506105f760048036038101906105f29190612afa565b61116a565b604051610604919061302e565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f9190612769565b6112bc565b6040516106419190612fd6565b60405180910390f35b34801561065657600080fd5b50610671600480360381019061066c9190612704565b611350565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd57600080fd5b600080828060200190518101906106e4919061272d565b915091506106f28282611448565b505050505050565b600c6020528060005260406000206000915054906101000a900460ff1681565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107e557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107f557506107f482611622565b5b9050919050565b600d6020528060005260406000206000915054906101000a900460ff1681565b60606000805461082b906135d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610857906135d6565b80156108a45780601f10610879576101008083540402835291602001916108a4565b820191906000526020600020905b81548152906001019060200180831161088757829003601f168201915b5050505050905090565b60006108b98261168c565b6108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef906131f0565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061093e82610da4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a690613250565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109ce6116f8565b73ffffffffffffffffffffffffffffffffffffffff1614806109fd57506109fc816109f76116f8565b6112bc565b5b610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3390613130565b60405180910390fd5b610a468383611700565b505050565b80600d600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610a826116f8565b73ffffffffffffffffffffffffffffffffffffffff16610aa0610f96565b73ffffffffffffffffffffffffffffffffffffffff1614610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90613210565b60405180910390fd5b6000600960008561ffff1661ffff1681526020019081526020016000208054610b1e906135d6565b905014610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5790613290565b60405180910390fd5b8181600960008661ffff1661ffff1681526020019081526020016000209190610b8a9291906123c4565b50505050565b610ba1610b9b6116f8565b826117b9565b610be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd790613270565b60405180910390fd5b610beb838383611897565b505050565b610bf981611afe565b60003382604051602001610c0e929190612fad565b6040516020818303038152906040529050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003487878786336000604051806020016040528060008152506040518963ffffffff1660e01b8152600401610c9797969594939291906132b0565b6000604051808303818588803b158015610cb057600080fd5b505af1158015610cc4573d6000803e3d6000fd5b50505050505050505050565b6000600d600083815260200190815260200160002060009054906101000a900460ff169050919050565b610d1583838360405180602001604052806000815250611108565b505050565b6000610d26600a611b51565b6000610d32600a611b67565b9050610d3e3382611448565b610d488184611b75565b610d75600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016110f2565b80915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4490613170565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90613150565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f166116f8565b73ffffffffffffffffffffffffffffffffffffffff16610f34610f96565b73ffffffffffffffffffffffffffffffffffffffff1614610f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8190613210565b60405180910390fd5b610f946000611be9565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610fcf906135d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffb906135d6565b80156110485780601f1061101d57610100808354040283529160200191611048565b820191906000526020600020905b81548152906001019060200180831161102b57829003601f168201915b5050505050905090565b60096020528060005260406000206000915090508054611071906135d6565b80601f016020809104026020016040519081016040528092919081815260200182805461109d906135d6565b80156110ea5780601f106110bf576101008083540402835291602001916110ea565b820191906000526020600020905b8154815290600101906020018083116110cd57829003601f168201915b505050505081565b6111046110fd6116f8565b8383611caf565b5050565b6111196111136116f8565b836117b9565b611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90613270565b60405180910390fd5b61116484848484611e1c565b50505050565b60606111758261168c565b6111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab906131d0565b60405180910390fd5b60006006600084815260200190815260200160002080546111d4906135d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611200906135d6565b801561124d5780601f106112225761010080835404028352916020019161124d565b820191906000526020600020905b81548152906001019060200180831161123057829003601f168201915b50505050509050600061125e611e78565b90506000815114156112745781925050506112b7565b6000825111156112a9578082604051602001611291929190612f22565b604051602081830303815290604052925050506112b7565b6112b284611e8f565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6113586116f8565b73ffffffffffffffffffffffffffffffffffffffff16611376610f96565b73ffffffffffffffffffffffffffffffffffffffff16146113cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c390613210565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561143c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143390613070565b60405180910390fd5b61144581611be9565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af906131b0565b60405180910390fd5b6114c18161168c565b15611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f8906130b0565b60405180910390fd5b61150d60008383611f36565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461155d919061340d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461161e60008383611f3b565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661177383610da4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006117c48261168c565b611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa90613110565b60405180910390fd5b600061180e83610da4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187d57508373ffffffffffffffffffffffffffffffffffffffff16611865846108ae565b73ffffffffffffffffffffffffffffffffffffffff16145b8061188e575061188d81856112bc565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118b782610da4565b73ffffffffffffffffffffffffffffffffffffffff161461190d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190490613090565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561197d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611974906130d0565b60405180910390fd5b611988838383611f36565b611993600082611700565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119e39190613494565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a3a919061340d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611af9838383611f3b565b505050565b611b0781611f40565b6000600660008381526020019081526020016000208054611b27906135d6565b905014611b4e57600660008281526020019081526020016000206000611b4d919061244a565b5b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b611b7e8261168c565b611bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb490613190565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611be492919061248a565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d15906130f0565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e0f9190612fd6565b60405180910390a3505050565b611e27848484611897565b611e338484848461205d565b611e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6990613050565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e9a8261168c565b611ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed090613230565b60405180910390fd5b6000611ee3611e78565b90506000815111611f035760405180602001604052806000815250611f2e565b80611f0d846121f4565b604051602001611f1e929190612f22565b6040516020818303038152906040525b915050919050565b505050565b505050565b6000611f4b82610da4565b9050611f5981600084611f36565b611f64600083611700565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb49190613494565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461205981600084611f3b565b5050565b600061207e8473ffffffffffffffffffffffffffffffffffffffff166123a1565b156121e7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120a76116f8565b8786866040518563ffffffff1660e01b81526004016120c99493929190612f61565b602060405180830381600087803b1580156120e357600080fd5b505af192505050801561211457506040513d601f19601f820116820180604052508101906121119190612910565b60015b612197573d8060008114612144576040519150601f19603f3d011682016040523d82523d6000602084013e612149565b606091505b5060008151141561218f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218690613050565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506121ec565b600190505b949350505050565b6060600082141561223c576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061239c565b600082905060005b6000821461226e57808061225790613639565b915050600a826122679190613463565b9150612244565b60008167ffffffffffffffff8111156122b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122e25781602001600182028036833780820191505090505b5090505b60008514612395576001826122fb9190613494565b9150600a8561230a9190613682565b6030612316919061340d565b60f81b818381518110612352577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561238e9190613463565b94506122e6565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546123d0906135d6565b90600052602060002090601f0160209004810192826123f25760008555612439565b82601f1061240b57803560ff1916838001178555612439565b82800160010185558215612439579182015b8281111561243857823582559160200191906001019061241d565b5b5090506124469190612510565b5090565b508054612456906135d6565b6000825580601f106124685750612487565b601f0160209004906000526020600020908101906124869190612510565b5b50565b828054612496906135d6565b90600052602060002090601f0160209004810192826124b857600085556124ff565b82601f106124d157805160ff19168380011785556124ff565b828001600101855582156124ff579182015b828111156124fe5782518255916020019190600101906124e3565b5b50905061250c9190612510565b5090565b5b80821115612529576000816000905550600101612511565b5090565b600061254061253b84613368565b613343565b90508281526020810184848401111561255857600080fd5b612563848285613594565b509392505050565b600061257e61257984613399565b613343565b90508281526020810184848401111561259657600080fd5b6125a1848285613594565b509392505050565b6000813590506125b881613cc5565b92915050565b6000815190506125cd81613cdc565b92915050565b6000813590506125e281613cf3565b92915050565b6000813590506125f781613d0a565b92915050565b60008151905061260c81613d0a565b92915050565b60008083601f84011261262457600080fd5b8235905067ffffffffffffffff81111561263d57600080fd5b60208301915083600182028301111561265557600080fd5b9250929050565b600082601f83011261266d57600080fd5b813561267d84826020860161252d565b91505092915050565b600082601f83011261269757600080fd5b81356126a784826020860161256b565b91505092915050565b6000813590506126bf81613d21565b92915050565b6000813590506126d481613d38565b92915050565b6000815190506126e981613d38565b92915050565b6000813590506126fe81613d4f565b92915050565b60006020828403121561271657600080fd5b6000612724848285016125a9565b91505092915050565b6000806040838503121561274057600080fd5b600061274e858286016125be565b925050602061275f858286016126da565b9150509250929050565b6000806040838503121561277c57600080fd5b600061278a858286016125a9565b925050602061279b858286016125a9565b9150509250929050565b6000806000606084860312156127ba57600080fd5b60006127c8868287016125a9565b93505060206127d9868287016125a9565b92505060406127ea868287016126c5565b9150509250925092565b6000806000806080858703121561280a57600080fd5b6000612818878288016125a9565b9450506020612829878288016125a9565b935050604061283a878288016126c5565b925050606085013567ffffffffffffffff81111561285757600080fd5b6128638782880161265c565b91505092959194509250565b6000806040838503121561288257600080fd5b6000612890858286016125a9565b92505060206128a1858286016125d3565b9150509250929050565b600080604083850312156128be57600080fd5b60006128cc858286016125a9565b92505060206128dd858286016126c5565b9150509250929050565b6000602082840312156128f957600080fd5b6000612907848285016125e8565b91505092915050565b60006020828403121561292257600080fd5b6000612930848285016125fd565b91505092915050565b60006020828403121561294b57600080fd5b600082013567ffffffffffffffff81111561296557600080fd5b61297184828501612686565b91505092915050565b60006020828403121561298c57600080fd5b600061299a848285016126b0565b91505092915050565b6000806000604084860312156129b857600080fd5b60006129c6868287016126b0565b935050602084013567ffffffffffffffff8111156129e357600080fd5b6129ef86828701612612565b92509250509250925092565b60008060008060608587031215612a1157600080fd5b6000612a1f878288016126b0565b945050602085013567ffffffffffffffff811115612a3c57600080fd5b612a4887828801612612565b93509350506040612a5b878288016126c5565b91505092959194509250565b60008060008060808587031215612a7d57600080fd5b6000612a8b878288016126b0565b945050602085013567ffffffffffffffff811115612aa857600080fd5b612ab48782880161265c565b9350506040612ac5878288016126ef565b925050606085013567ffffffffffffffff811115612ae257600080fd5b612aee8782880161265c565b91505092959194509250565b600060208284031215612b0c57600080fd5b6000612b1a848285016126c5565b91505092915050565b60008060408385031215612b3657600080fd5b6000612b44858286016126c5565b9250506020612b55858286016125d3565b9150509250929050565b612b68816134da565b82525050565b612b77816134c8565b82525050565b612b86816134ec565b82525050565b6000612b9883856133e0565b9350612ba5838584613594565b612bae8361376f565b840190509392505050565b6000612bc4826133ca565b612bce81856133e0565b9350612bde8185602086016135a3565b612be78161376f565b840191505092915050565b612bfb81613570565b82525050565b6000612c0c826133d5565b612c1681856133f1565b9350612c268185602086016135a3565b612c2f8161376f565b840191505092915050565b6000612c45826133d5565b612c4f8185613402565b9350612c5f8185602086016135a3565b80840191505092915050565b6000612c786032836133f1565b9150612c8382613780565b604082019050919050565b6000612c9b6026836133f1565b9150612ca6826137cf565b604082019050919050565b6000612cbe6025836133f1565b9150612cc98261381e565b604082019050919050565b6000612ce1601c836133f1565b9150612cec8261386d565b602082019050919050565b6000612d046024836133f1565b9150612d0f82613896565b604082019050919050565b6000612d276019836133f1565b9150612d32826138e5565b602082019050919050565b6000612d4a602c836133f1565b9150612d558261390e565b604082019050919050565b6000612d6d6038836133f1565b9150612d788261395d565b604082019050919050565b6000612d90602a836133f1565b9150612d9b826139ac565b604082019050919050565b6000612db36029836133f1565b9150612dbe826139fb565b604082019050919050565b6000612dd6602e836133f1565b9150612de182613a4a565b604082019050919050565b6000612df96020836133f1565b9150612e0482613a99565b602082019050919050565b6000612e1c6031836133f1565b9150612e2782613ac2565b604082019050919050565b6000612e3f602c836133f1565b9150612e4a82613b11565b604082019050919050565b6000612e626020836133f1565b9150612e6d82613b60565b602082019050919050565b6000612e85602f836133f1565b9150612e9082613b89565b604082019050919050565b6000612ea86021836133f1565b9150612eb382613bd8565b604082019050919050565b6000612ecb6031836133f1565b9150612ed682613c27565b604082019050919050565b6000612eee6038836133f1565b9150612ef982613c76565b604082019050919050565b612f0d81613524565b82525050565b612f1c81613552565b82525050565b6000612f2e8285612c3a565b9150612f3a8284612c3a565b91508190509392505050565b6000602082019050612f5b6000830184612b6e565b92915050565b6000608082019050612f766000830187612b6e565b612f836020830186612b6e565b612f906040830185612f13565b8181036060830152612fa28184612bb9565b905095945050505050565b6000604082019050612fc26000830185612b6e565b612fcf6020830184612f13565b9392505050565b6000602082019050612feb6000830184612b7d565b92915050565b6000602082019050818103600083015261300b8184612bb9565b905092915050565b60006020820190506130286000830184612bf2565b92915050565b600060208201905081810360008301526130488184612c01565b905092915050565b6000602082019050818103600083015261306981612c6b565b9050919050565b6000602082019050818103600083015261308981612c8e565b9050919050565b600060208201905081810360008301526130a981612cb1565b9050919050565b600060208201905081810360008301526130c981612cd4565b9050919050565b600060208201905081810360008301526130e981612cf7565b9050919050565b6000602082019050818103600083015261310981612d1a565b9050919050565b6000602082019050818103600083015261312981612d3d565b9050919050565b6000602082019050818103600083015261314981612d60565b9050919050565b6000602082019050818103600083015261316981612d83565b9050919050565b6000602082019050818103600083015261318981612da6565b9050919050565b600060208201905081810360008301526131a981612dc9565b9050919050565b600060208201905081810360008301526131c981612dec565b9050919050565b600060208201905081810360008301526131e981612e0f565b9050919050565b6000602082019050818103600083015261320981612e32565b9050919050565b6000602082019050818103600083015261322981612e55565b9050919050565b6000602082019050818103600083015261324981612e78565b9050919050565b6000602082019050818103600083015261326981612e9b565b9050919050565b6000602082019050818103600083015261328981612ebe565b9050919050565b600060208201905081810360008301526132a981612ee1565b9050919050565b600060c0820190506132c5600083018a612f04565b81810360208301526132d881888a612b8c565b905081810360408301526132ec8187612bb9565b90506132fb6060830186612b5f565b6133086080830185612b6e565b81810360a083015261331a8184612bb9565b905098975050505050505050565b600060208201905061333d6000830184612f13565b92915050565b600061334d61335e565b90506133598282613608565b919050565b6000604051905090565b600067ffffffffffffffff82111561338357613382613740565b5b61338c8261376f565b9050602081019050919050565b600067ffffffffffffffff8211156133b4576133b3613740565b5b6133bd8261376f565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061341882613552565b915061342383613552565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613458576134576136b3565b5b828201905092915050565b600061346e82613552565b915061347983613552565b925082613489576134886136e2565b5b828204905092915050565b600061349f82613552565b91506134aa83613552565b9250828210156134bd576134bc6136b3565b5b828203905092915050565b60006134d382613532565b9050919050565b60006134e582613532565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061357b82613582565b9050919050565b600061358d82613532565b9050919050565b82818337600083830152505050565b60005b838110156135c15780820151818401526020810190506135a6565b838111156135d0576000848401525b50505050565b600060028204905060018216806135ee57607f821691505b6020821081141561360257613601613711565b5b50919050565b6136118261376f565b810181811067ffffffffffffffff821117156136305761362f613740565b5b80604052505050565b600061364482613552565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613677576136766136b3565b5b600182019050919050565b600061368d82613552565b915061369883613552565b9250826136a8576136a76136e2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f5468652072656d6f746520616464726573732068617320616c7265616479206260008201527f65656e2073657420666f722074686520636861696e4964210000000000000000602082015250565b613cce816134c8565b8114613cd957600080fd5b50565b613ce5816134da565b8114613cf057600080fd5b50565b613cfc816134ec565b8114613d0757600080fd5b50565b613d13816134f8565b8114613d1e57600080fd5b50565b613d2a81613524565b8114613d3557600080fd5b50565b613d4181613552565b8114613d4c57600080fd5b50565b613d588161355c565b8114613d6357600080fd5b5056fea2646970667358221220c814079c39dac143a09eea0b799e0583b7c3471ccc4408983dfa706e224e7a8564736f6c63430008040033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "approve(address,uint256)": {
          "details": "See {IERC721-approve}."
        },
        "balanceOf(address)": {
          "details": "See {IERC721-balanceOf}."
        },
        "getApproved(uint256)": {
          "details": "See {IERC721-getApproved}."
        },
        "isApprovedForAll(address,address)": {
          "details": "See {IERC721-isApprovedForAll}."
        },
        "name()": {
          "details": "See {IERC721Metadata-name}."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "ownerOf(uint256)": {
          "details": "See {IERC721-ownerOf}."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "See {IERC721-safeTransferFrom}."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "See {IERC721-safeTransferFrom}."
        },
        "setApprovalForAll(address,bool)": {
          "details": "See {IERC721-setApprovalForAll}."
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "symbol()": {
          "details": "See {IERC721Metadata-symbol}."
        },
        "tokenURI(uint256)": {
          "details": "See {IERC721Metadata-tokenURI}."
        },
        "transferFrom(address,address,uint256)": {
          "details": "See {IERC721-transferFrom}."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 130,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_name",
          "offset": 0,
          "slot": "0",
          "type": "t_string_storage"
        },
        {
          "astId": 132,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_symbol",
          "offset": 0,
          "slot": "1",
          "type": "t_string_storage"
        },
        {
          "astId": 136,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_owners",
          "offset": 0,
          "slot": "2",
          "type": "t_mapping(t_uint256,t_address)"
        },
        {
          "astId": 140,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_balances",
          "offset": 0,
          "slot": "3",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 144,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_tokenApprovals",
          "offset": 0,
          "slot": "4",
          "type": "t_mapping(t_uint256,t_address)"
        },
        {
          "astId": 150,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_operatorApprovals",
          "offset": 0,
          "slot": "5",
          "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
        },
        {
          "astId": 1117,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_tokenURIs",
          "offset": 0,
          "slot": "6",
          "type": "t_mapping(t_uint256,t_string_storage)"
        },
        {
          "astId": 7,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_owner",
          "offset": 0,
          "slot": "7",
          "type": "t_address"
        },
        {
          "astId": 1906,
          "contract": "contracts/NFT.sol:NFT",
          "label": "endpoint",
          "offset": 0,
          "slot": "8",
          "type": "t_contract(ILayerZeroEndpoint)2277"
        },
        {
          "astId": 1910,
          "contract": "contracts/NFT.sol:NFT",
          "label": "remotes",
          "offset": 0,
          "slot": "9",
          "type": "t_mapping(t_uint16,t_bytes_storage)"
        },
        {
          "astId": 1917,
          "contract": "contracts/NFT.sol:NFT",
          "label": "_tokenIds",
          "offset": 0,
          "slot": "10",
          "type": "t_struct(Counter)1582_storage"
        },
        {
          "astId": 1919,
          "contract": "contracts/NFT.sol:NFT",
          "label": "contractAddress",
          "offset": 0,
          "slot": "11",
          "type": "t_address"
        },
        {
          "astId": 1923,
          "contract": "contracts/NFT.sol:NFT",
          "label": "tokenExists",
          "offset": 0,
          "slot": "12",
          "type": "t_mapping(t_uint256,t_bool)"
        },
        {
          "astId": 1927,
          "contract": "contracts/NFT.sol:NFT",
          "label": "isTokenIdLocked",
          "offset": 0,
          "slot": "13",
          "type": "t_mapping(t_uint256,t_bool)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_bytes_storage": {
          "encoding": "bytes",
          "label": "bytes",
          "numberOfBytes": "32"
        },
        "t_contract(ILayerZeroEndpoint)2277": {
          "encoding": "inplace",
          "label": "contract ILayerZeroEndpoint",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_mapping(t_address,t_bool))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => bool))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_bool)"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_uint16,t_bytes_storage)": {
          "encoding": "mapping",
          "key": "t_uint16",
          "label": "mapping(uint16 => bytes)",
          "numberOfBytes": "32",
          "value": "t_bytes_storage"
        },
        "t_mapping(t_uint256,t_address)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => address)",
          "numberOfBytes": "32",
          "value": "t_address"
        },
        "t_mapping(t_uint256,t_bool)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_uint256,t_string_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => string)",
          "numberOfBytes": "32",
          "value": "t_string_storage"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(Counter)1582_storage": {
          "encoding": "inplace",
          "label": "struct Counters.Counter",
          "members": [
            {
              "astId": 1581,
              "contract": "contracts/NFT.sol:NFT",
              "label": "_value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "32"
        },
        "t_uint16": {
          "encoding": "inplace",
          "label": "uint16",
          "numberOfBytes": "2"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }